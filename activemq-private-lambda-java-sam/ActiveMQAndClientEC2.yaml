AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
  ActiveMQEngineVersion:
    Type: String
    Default: 5.18
    Description: ActiveMQ engine version
  JavaVersion:
    Type: String
    Description: Choose the version of Java. Lambda currently supports Java 11, 17 and 21
    AllowedValues:
      - java11
      - java17
      - java21
    Default: java21
  ActiveMQBrokerName:
    Type: String
    Default: ActiveMQJavaLambdaBroker
    Description: ActiveMQ broker name for Lambda function
  ActiveMQQueueName:
    Type: String
    Default: ActiveMQJavaLambdaQueue
    Description: ActiveMQ queue name for Lambda function
  ActiveMQBrokerAdminUser:
    Type: String
    Description: Username for the ActiveMQ Broker
    Default: activemqadmin
  ActiveMQBrokerPassword:
    Type: String
    Description: Password for the ActiveMQ Broker
    Default: activemqPassword123
    NoEcho: true
  ServerlessLandGithubLocation:
    Type: String
    Default: https://github.com/aws-samples/serverless-patterns.git
    Description: Github location of the code. Make sure to leave the .git at the end even if you are using a fork

Mappings:
  SubnetConfig:
      VPC:
        CIDR: '10.0.0.0/16'
      PublicOne:
        CIDR: '10.0.0.0/24'
      PublicTwo:
        CIDR: '10.0.1.0/24'
      PublicThree:
        CIDR: '10.0.2.0/24'
      PrivateSubnetActiveMQOne:
        CIDR: '10.0.3.0/24'
      PrivateSubnetActiveMQTwo:
        CIDR: '10.0.4.0/24'
      PrivateSubnetActiveMQThree:
        CIDR: '10.0.5.0/24'

Resources:
  # Secrets Manager Secret for ActiveMQ credentials
  ActiveMQSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'AmazonActiveMQCredentials'
      Description: ActiveMQ broker master user credentials
      SecretString: !Sub |
        {
          "username": "${ActiveMQBrokerAdminUser}",
          "password": "${ActiveMQBrokerPassword}"
        }

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
      Tags:
        - Key: 'Name'
          Value: 'ActiveMQVPC'

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnetOne'
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnetTwo'
  PublicSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'PublicSubnetThree'
  PrivateSubnetActiveMQOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetActiveMQOne', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetActiveMQOne'
  PrivateSubnetActiveMQTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetActiveMQTwo', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetActiveMQTwo'
  PrivateSubnetActiveMQThree:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 2
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateSubnetActiveMQThree', 'CIDR']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'PrivateSubnetActiveMQThree'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  NATEIP1:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties: 
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP1.AllocationId
      SubnetId: !Ref 'PublicSubnetOne'
      Tags: 
        - Key: 'Name'
          Value: 'ActiveMQNATGateway1'

  NATEIP2:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties: 
      Domain: vpc

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP2.AllocationId
      SubnetId: !Ref 'PublicSubnetTwo'
      Tags: 
        - Key: 'Name'
          Value: 'ActiveMQNATGateway2'

  NATEIP3:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties: 
      Domain: vpc

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP3.AllocationId
      SubnetId: !Ref 'PublicSubnetThree'
      Tags: 
        - Key: 'Name'
          Value: 'ActiveMQNATGateway3'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
      
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
      
  PublicSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetThree
      RouteTableId: !Ref PublicRouteTable
      
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: NATGateway1
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway1'
      
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: NATGateway2
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable2'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway2'

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  PrivateRoute3:
    Type: AWS::EC2::Route
    DependsOn: NATGateway3
    Properties:
      RouteTableId: !Ref 'PrivateRouteTable3'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NATGateway3'

  PrivateSubnetActiveMQOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnetActiveMQOne
      
  PrivateSubnetActiveMQTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnetActiveMQTwo
      
  PrivateSubnetActiveMQThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnetActiveMQThree
  
  ActiveMQClientInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 from BastionHostSecurityGroup
      GroupName: !Sub "${AWS::StackName} Security group attached to the ActiveMQ client"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/16

  ActiveMQSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: [VPC,ActiveMQClientInstanceSecurityGroup]
    Properties:
      GroupDescription: ActiveMQ Security Group
      GroupName: !Sub "${AWS::StackName} Security group for the ActiveMQ broker"
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 61617
          ToPort: 61617
          SourceSecurityGroupId: !GetAtt ActiveMQClientInstanceSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 8162
          ToPort: 8162
          SourceSecurityGroupId: !GetAtt ActiveMQClientInstanceSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 10.0.0.0/16

  ActiveMQClientSelfIngressAllowRule:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: ActiveMQClientInstanceSecurityGroup
    Properties:
      GroupId: !GetAtt ActiveMQClientInstanceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt ActiveMQClientInstanceSecurityGroup.GroupId

  # ActiveMQ Configuration
  ActiveMQConfiguration:
    Type: AWS::AmazonMQ::Configuration
    Properties:
      Name: !Sub "${AWS::StackName}-activemq-config"
      Description: ActiveMQ configuration for the cluster
      EngineType: ACTIVEMQ
      EngineVersion: !Ref ActiveMQEngineVersion
      Data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pgo8YnJva2VyIHhtbG5zPSJodHRwOi8vYWN0aXZlbXEuYXBhY2hlLm9yZy9zY2hlbWEvY29yZSI+CiAgPGRlc3RpbmF0aW9uUG9saWN5PgogICAgPHBvbGljeU1hcD4KICAgICAgPHBvbGljeUVudHJpZXM+CiAgICAgICAgPHBvbGljeUVudHJ5IHRvcGljPSI+IiBwcm9kdWNlckZsb3dDb250cm9sPSJ0cnVlIj4KICAgICAgICAgIDxwZW5kaW5nTWVzc2FnZUxpbWl0U3RyYXRlZ3k+CiAgICAgICAgICAgIDxzcG9vbGluZ1N1YnNjcmlwdGlvblBlbmRpbmdNZXNzYWdlTGltaXRTdHJhdGVneSBsaW1pdD0iMTAwMCIvPgogICAgICAgICAgPC9wZW5kaW5nTWVzc2FnZUxpbWl0U3RyYXRlZ3k+CiAgICAgICAgPC9wb2xpY3lFbnRyeT4KICAgICAgICA8cG9saWN5RW50cnkgcXVldWU9Ij4iIHByb2R1Y2VyRmxvd0NvbnRyb2w9InRydWUiIG1lbW9yeUxpbWl0PSIxbWIiPgogICAgICAgIDwvcG9saWN5RW50cnk+CiAgICAgIDwvcG9saWN5RW50cmllcz4KICAgIDwvcG9saWN5TWFwPgogIDwvZGVzdGluYXRpb25Qb2xpY3k+CiAgPHN5c3RlbVVzYWdlPgogICAgPHN5c3RlbVVzYWdlPgogICAgICA8bWVtb3J5VXNhZ2U+CiAgICAgICAgPG1lbW9yeVVzYWdlIGxpbWl0PSI2NCBtYiIvPgogICAgICA8L21lbW9yeVVzYWdlPgogICAgICA8c3RvcmVVc2FnZT4KICAgICAgICA8c3RvcmVVc2FnZSBsaW1pdD0iNTEyIG1iIi8+CiAgICAgIDwvc3RvcmVVc2FnZT4KICAgICAgPHRlbXBVc2FnZT4KICAgICAgICA8dGVtcFVzYWdlIGxpbWl0PSIxMjggbWIiLz4KICAgICAgPC90ZW1wVXNhZ2U+CiAgICA8L3N5c3RlbVVzYWdlPgogIDwvc3lzdGVtVXNhZ2U+CjwvYnJva2VyPgo=

  # ActiveMQ Broker
  ActiveMQBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:
      BrokerName: !Ref ActiveMQBrokerName
      DeploymentMode: ACTIVE_STANDBY_MULTI_AZ
      EngineType: ACTIVEMQ
      EngineVersion: !Ref ActiveMQEngineVersion
      HostInstanceType: mq.t3.micro
      PubliclyAccessible: false
      AutoMinorVersionUpgrade: true
      Configuration:
        Id: !Ref ActiveMQConfiguration
        Revision: 1
      Users:
        - Username: !Ref ActiveMQBrokerAdminUser
          Password: !Ref ActiveMQBrokerPassword
          ConsoleAccess: true
          Groups:
            - admin
      SubnetIds:
        - !Ref PrivateSubnetActiveMQOne
        - !Ref PrivateSubnetActiveMQTwo
      SecurityGroups:
        - !Ref ActiveMQSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-activemq-broker"

  ActiveMQClientEC2Instance:
    DependsOn: ActiveMQBroker
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m5.large
      IamInstanceProfile: !Ref EC2InstanceProfile
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      SubnetId: !Ref PublicSubnetOne
      SecurityGroupIds: [!GetAtt ActiveMQClientInstanceSecurityGroup.GroupId]
      ImageId: !Ref LatestAmiId
      Tags:
        - Key: 'Name'
          Value: 'ActiveMQClientInstance'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
            DeleteOnTermination: true    
      UserData:
        Fn::Base64:
          !Sub
          - |
            #!/bin/bash
            yum update -y
            
            # install Java
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum update -y
            
                # install Java
                JAVA_VERSION=${java_version}
                echo "JAVA_VERSION=$JAVA_VERSION" >> /home/ec2-user/.bash_profile
                if [ "$JAVA_VERSION" == "java11" ]; then
                    sudo yum install java-11-amazon-corretto-devel -y
                elif [ "$JAVA_VERSION" == "java17" ]; then
                    sudo yum install java-17-amazon-corretto-devel -y
                elif [ "$JAVA_VERSION" == "java21" ]; then
                    sudo yum install java-21-amazon-corretto-devel -y
                else
                    sudo yum install java-21-amazon-corretto-devel -y
                fi
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of Java succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum install nmap-ncat -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of nmap succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum install git -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of git succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum erase awscli -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum erase of awscli succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                yum install jq -y
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of jq succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                sudo yum install -y docker
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of docker succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done
            
            service docker start
            usermod -a -G docker ec2-user
            
            max_attempts=5
            attempt_num=1
            success=false
            while [ $success = false ] && [ $attempt_num -le $max_attempts ]; do
                echo "Trying yum install"
                sudo yum install -y maven
                # Check the exit code of the command
                if [ $? -eq 0 ]; then
                    echo "Yum install of maven succeeded"
                    success=true
                else
                    echo "Attempt $attempt_num failed. Sleeping for 3 seconds and trying again..."
                    sleep 3
                    ((attempt_num++))
                fi
            done

            cd /home/ec2-user
            su -c "ln -s /usr/bin/python3.8 /usr/bin/python3" -s /bin/sh ec2-user
            su -c "pip3 install boto3 --user" -s /bin/sh ec2-user
            su -c "pip3 install kafka-python --user" -s /bin/sh ec2-user

            # install AWS CLI 2 - access with aws2
            cd /home/ec2-user
            mkdir -p awscli
            cd awscli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            # Install AWS SAM CLI
            cd /home/ec2-user
            mkdir -p awssam
            cd awssam
            wget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
            unzip aws-sam-cli-linux-x86_64.zip -d sam-installation
            sudo ./sam-installation/install
            
            # Set environment variables
            ACTIVEMQ_BROKER_ID=${activemq_broker_id}
            ACTIVEMQ_BROKER_ARN=${activemq_broker_arn}
            #ACTIVEMQ_BROKER_ENDPOINT1=${activemq_broker_endpoint1}
            #ACTIVEMQ_BROKER_ENDPOINT2=${activemq_broker_endpoint2}
            ACTIVEMQ_BROKER_ENDPOINT="failover:(${activemq_broker_endpoint1},${activemq_broker_endpoint2})"
            ACTIVEMQ_QUEUE_NAME=${activemq_queue_name}
            ACTIVEMQ_SECRET_ARN=${activemq_secret_arn}
            AWS_REGION=${aws_region}
            ACTIVEMQ_SUBNET_ONE=${activemq_subnet_one}
            ACTIVEMQ_SUBNET_TWO=${activemq_subnet_two}
            ACTIVEMQ_SUBNET_THREE=${activemq_subnet_three}
            ACTIVEMQ_SECURITY_GROUP=${activemq_security_group}
            ACTIVEMQ_BROKER_ADMIN_USER=${activemq_broker_admin_user}
            ACTIVEMQ_BROKER_PASSWORD=${activemq_broker_password}
            SECURITY_GROUP=${security_group_id}

            echo "export ACTIVEMQ_BROKER_ID=$ACTIVEMQ_BROKER_ID" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_BROKER_ARN=$ACTIVEMQ_BROKER_ARN" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_BROKER_ENDPOINT=$ACTIVEMQ_BROKER_ENDPOINT" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_QUEUE_NAME=$ACTIVEMQ_QUEUE_NAME" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_SECRET_ARN=$ACTIVEMQ_SECRET_ARN" >> /home/ec2-user/.bash_profile
            echo "export AWS_REGION=$AWS_REGION" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_SUBNET_ONE=$ACTIVEMQ_SUBNET_ONE" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_SUBNET_TWO=$ACTIVEMQ_SUBNET_TWO" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_SUBNET_THREE=$ACTIVEMQ_SUBNET_THREE" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_SECURITY_GROUP=$ACTIVEMQ_SECURITY_GROUP" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_BROKER_ADMIN_USER=$ACTIVEMQ_BROKER_ADMIN_USER" >> /home/ec2-user/.bash_profile
            echo "export ACTIVEMQ_BROKER_PASSWORD=$ACTIVEMQ_BROKER_PASSWORD" >> /home/ec2-user/.bash_profile
            echo "export SECURITY_GROUP=$SECURITY_GROUP" >> /home/ec2-user/.bash_profile
                       
            # Clone serverless patterns
            cd /home/ec2-user
            SERVERLESS_LAND_GITHUB_LOCATION=${serverless_land_github_location}
            git clone -n --depth=1 --filter=tree:0 $SERVERLESS_LAND_GITHUB_LOCATION
            cd ./serverless-patterns
            git sparse-checkout set --no-cone /activemq-private-lambda-java-sam
            git checkout
            cd activemq-private-lambda-java-sam
            sudo chown -R ec2-user .
            
            #Substitute SAM template variables
            cd /home/ec2-user/serverless-patterns/activemq-private-lambda-java-sam
            cd activemq_consumer_dynamo_sam
            cp template_original.yaml template.yaml
            sudo chown -R ec2-user .
            source /home/ec2-user/.bash_profile
            sed -i "s/ACTIVEMQ_BROKER_ARN/$ACTIVEMQ_BROKER_ARN/g" template.yaml
            sed -i "s/ACTIVEMQ_QUEUE_NAME/$ACTIVEMQ_QUEUE_NAME/g" template.yaml
            sed -i "s/ACTIVEMQ_SECRET_ARN/$ACTIVEMQ_SECRET_ARN/g" template.yaml
            sed -i "s/JAVA_VERSION/$JAVA_VERSION/g" template.yaml
            sed -i "s/ACTIVEMQ_SUBNET_ONE/$ACTIVEMQ_SUBNET_ONE/g" template.yaml
            sed -i "s/ACTIVEMQ_SUBNET_TWO/$ACTIVEMQ_SUBNET_TWO/g" template.yaml
            sed -i "s/ACTIVEMQ_SUBNET_THREE/$ACTIVEMQ_SUBNET_THREE/g" template.yaml
            sed -i "s/SECURITY_GROUP/$SECURITY_GROUP/g" template.yaml
            
            #Install ActiveMQ (needed in case you want to use the CLI as a client to look at queues etc.)
            mkdir /home/ec2-user/activemq_client
            cd /home/ec2-user/activemq_client
            wget https://archive.apache.org/dist/activemq/5.18.6/apache-activemq-5.18.6-bin.tar.gz
            tar zxvf apache-activemq-5.18.6-bin.tar.gz
            sudo chown -R ec2-user .
            
            #Update Shell script for sending ActiveMQ messages to Lambda function
            cd /home/ec2-user/serverless-patterns/activemq-private-lambda-java-sam/activemq_message_sender_json
            sudo chown ec2-user ./commands.sh
            sed -i "s/ACTIVEMQ_BROKER_ENDPOINT/$ACTIVEMQ_BROKER_ENDPOINT/g" commands.sh
            sed -i "s/ACTIVEMQ_QUEUE_NAME/$ACTIVEMQ_QUEUE_NAME/g" commands.sh
            mvn clean install
            
            
            # Get IP CIDR range for EC2 Instance Connect
            cd /home/ec2-user
            mkdir -p ip_prefix
            cd ip_prefix
            git clone https://github.com/joetek/aws-ip-ranges-json.git
            cd aws-ip-ranges-json
            AWS_REGION=${aws_region}
            EC2_CONNECT_IP=$(cat ip-ranges-ec2-instance-connect.json | jq -r --arg AWS_REGION "$AWS_REGION" '.prefixes[] | select(.region==$AWS_REGION).ip_prefix')
            echo "export EC2_CONNECT_IP=$EC2_CONNECT_IP" >> /home/ec2-user/.bash_profile
            SECURITY_GROUP=${security_group_id}
            echo "export SECURITY_GROUP=$SECURITY_GROUP" >> /home/ec2-user/.bash_profile
            aws ec2 authorize-security-group-ingress --region $AWS_REGION --group-id $SECURITY_GROUP --protocol tcp --port 22 --cidr $EC2_CONNECT_IP
            
          - activemq_broker_id: !Ref ActiveMQBroker
            activemq_broker_arn: !GetAtt ActiveMQBroker.Arn
            activemq_broker_endpoint1: !Select [ 0, !GetAtt ActiveMQBroker.OpenWireEndpoints ]
            activemq_broker_endpoint2: !Select [ 1, !GetAtt ActiveMQBroker.OpenWireEndpoints ]
            activemq_queue_name: !Ref ActiveMQQueueName
            activemq_secret_arn: !Ref ActiveMQSecret
            serverless_land_github_location: !Ref ServerlessLandGithubLocation
            aws_region: !Ref 'AWS::Region'
            java_version: !Ref JavaVersion
            security_group_id : !GetAtt ActiveMQClientInstanceSecurityGroup.GroupId
            activemq_subnet_one: !Ref PrivateSubnetActiveMQOne
            activemq_subnet_two: !Ref PrivateSubnetActiveMQTwo
            activemq_subnet_three: !Ref PrivateSubnetActiveMQThree
            activemq_security_group: !GetAtt ActiveMQSecurityGroup.GroupId
            activemq_broker_admin_user: !Ref ActiveMQBrokerAdminUser
            activemq_broker_password: !Ref ActiveMQBrokerPassword

  EC2InstanceEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      PreserveClientIp: true
      SecurityGroupIds: 
        - !GetAtt ActiveMQClientInstanceSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnetOne

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonMQFullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess_v2
      Policies:
        - PolicyName: ActiveMQAccess
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "ActiveMQFullAccess",
                      "Effect": "Allow",
                      "Action": [
                          "mq:*"
                      ],
                      "Resource": "*"
                  }
              ]
          }'
        - PolicyName: SecretsManagerAccess
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "secretsmanager:GetSecretValue",
                          "secretsmanager:PutSecretValue",
                          "secretsmanager:DescribeSecret"
                      ],
                      "Resource": "${ActiveMQSecret}"
                  }
              ]
          }'
        - PolicyName: CloudformationDeploy
          PolicyDocument: !Sub '{
              "Version": "2012-10-17",
              "Statement": [
                  {
            "Effect": "Allow",
            "Action": [
                "iam:*"
            ],
            "Resource": "*"
        }
              ]
          }' 
        - PolicyName: SecurityGroupsPolicy
          PolicyDocument: !Sub '{
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:DescribeSecurityGroups",
                        "ec2:DescribeSecurityGroupRules",
                        "ec2:DescribeTags"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:AuthorizeSecurityGroupIngress", 
                        "ec2:RevokeSecurityGroupIngress", 
                        "ec2:AuthorizeSecurityGroupEgress", 
                        "ec2:RevokeSecurityGroupEgress", 
                        "ec2:ModifySecurityGroupRules",
                        "ec2:UpdateSecurityGroupRuleDescriptionsIngress", 
                        "ec2:UpdateSecurityGroupRuleDescriptionsEgress"
                    ],
                    "Resource": [
                        "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
                    ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ec2:ModifySecurityGroupRules"
                    ],
                    "Resource": [
                        "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group-rule/*"
                    ]
                }
            ]
        }'         

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join
        - '-'
        - - 'EC2ActiveMQProfile'
          - !Ref 'AWS::StackName'
      Roles:
        - !Ref EC2Role

Outputs:
  VPCId: 
    Description: The ID of the VPC created
    Value: !Ref 'VPC'
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PublicSubnetOne: 
    Description: The name of the public subnet created
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetOne"
  PrivateSubnetActiveMQOne: 
    Description: The ID of private subnet one created
    Value: !Ref 'PrivateSubnetActiveMQOne'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetActiveMQOne"
  PrivateSubnetActiveMQTwo: 
    Description: The ID of private subnet two created
    Value: !Ref 'PrivateSubnetActiveMQTwo'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetActiveMQTwo"
  PrivateSubnetActiveMQThree: 
    Description: The ID of private subnet three created
    Value: !Ref 'PrivateSubnetActiveMQThree'
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetActiveMQThree"
  VPCStackName: 
    Description: The name of the VPC Stack
    Value: !Ref 'AWS::StackName'
    Export:
      Name: !Sub "${AWS::StackName}-VPCStackName"
  ActiveMQBrokerEndpoint1:
    Description: ActiveMQ Broker OpenWire Endpoint
    Value: !Select [0, !GetAtt ActiveMQBroker.OpenWireEndpoints]
    Export:
      Name: !Sub "${AWS::StackName}-ActiveMQBrokerEndpoint1"
  ActiveMQBrokerEndpoint2:
    Description: ActiveMQ Broker OpenWire Endpoint
    Value: !Select [1, !GetAtt ActiveMQBroker.OpenWireEndpoints]
    Export:
      Name: !Sub "${AWS::StackName}-ActiveMQBrokerEndpoint2"
  ActiveMQBrokerConsoleURL:
    Description: ActiveMQ Broker Web Console URL
    Value: !Sub 
      - "https://${endpoint}"
      - endpoint: !Select [0, !GetAtt ActiveMQBroker.IpAddresses]
    Export:
      Name: !Sub "${AWS::StackName}-ActiveMQBrokerConsoleURL"
  ActiveMQSecretArn:
    Description: ARN of the ActiveMQ credentials secret
    Value: !Ref ActiveMQSecret
    Export:
      Name: !Sub "${AWS::StackName}-ActiveMQSecretArn"
  SecurityGroupId:
    Description: ID of security group for ActiveMQ clients
    Value: !GetAtt ActiveMQSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-SecurityGroupId"
  EC2InstanceEndpointID:
    Description: The ID of the EC2 Instance Endpoint
    Value: !Ref EC2InstanceEndpoint
  ActiveMQBrokerName:
    Description: The Broker name to use for the Java Lambda Function
    Value: !Ref ActiveMQBrokerName
    Export:
      Name: !Sub "${AWS::StackName}-ActiveMQBrokerName"
  ActiveMQQueueName:
    Description: The Queue name to use for the Java Lambda Function
    Value: !Ref ActiveMQQueueName
    Export:
      Name: !Sub "${AWS::StackName}-ActiveMQQueueName"
